# Generated by Django 3.0.6 on 2020-11-06 14:07

import core.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Namespace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, validators=[core.validators.NamespaceNameValidator()])),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(validators=[core.validators.ZoneNameValidator()])),
                ('nsmaster', models.TextField(validators=[core.validators.ValidateRrName])),
                ('mail', models.TextField(validators=[core.validators.ValidateRrName])),
                ('serial', models.PositiveIntegerField(default=1)),
                ('refresh', models.PositiveIntegerField(default=1200)),
                ('retry', models.PositiveIntegerField(default=180)),
                ('expire', models.PositiveIntegerField(default=1209600)),
                ('minttl', models.PositiveIntegerField(default=3600)),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Namespace')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Zonerule',
            fields=[
                ('zone', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.Zone')),
                ('namepat', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(1024)])),
                ('typepat', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(1024)])),
            ],
        ),
        migrations.CreateModel(
            name='Rr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(validators=[core.validators.ValidateRrName])),
                ('type', models.TextField(choices=[('SOA', 'SOA'), ('NS', 'NS'), ('A', 'A'), ('AAAA', 'AAAA'), ('CNAME', 'CNAME'), ('MX', 'MX'), ('PTR', 'PTR'), ('SRV', 'SRV'), ('TXT', 'TXT'), ('DNAME', 'DNAME')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('a', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('aaaa', models.GenericIPAddressField(blank=True, null=True, protocol='IPv6')),
                ('cname', models.TextField(blank=True, null=True, validators=[core.validators.ValidateRrName])),
                ('ns', models.TextField(blank=True, null=True, validators=[core.validators.ValidateRrName])),
                ('prio', models.PositiveIntegerField(blank=True, null=True)),
                ('mx', models.TextField(blank=True, null=True, validators=[core.validators.ValidateRrName])),
                ('ptr', models.TextField(blank=True, null=True, validators=[core.validators.ValidateRrName])),
                ('txt', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(65535)])),
                ('srv_priority', models.PositiveIntegerField(blank=True, null=True)),
                ('srv_weight', models.PositiveIntegerField(blank=True, null=True)),
                ('srv_port', models.PositiveIntegerField(blank=True, null=True)),
                ('srv_target', models.TextField(blank=True, null=True, validators=[core.validators.ValidateRrName])),
                ('caa_flag', models.PositiveIntegerField(blank=True, null=True)),
                ('caa_tag', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(253)])),
                ('caa_value', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(253)])),
                ('dname', models.TextField(blank=True, null=True, validators=[core.validators.ZoneNameValidator()])),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Zone')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PermZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(choices=[('AccessZone', 'AccessZone'), ('CreateRrInZone', 'CreateRrInZone')])),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Zone')),
            ],
        ),
        migrations.CreateModel(
            name='PermRr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(choices=[('AccessRr', 'AccessRr'), ('DeleteRr', 'DeleteRr')])),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('rr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Rr')),
            ],
        ),
        migrations.CreateModel(
            name='PermNamespace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(choices=[('AccessNamespace', 'AccessNamespace'), ('CreateZoneInNamespace', 'CreateZoneInNamespace')])),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Namespace')),
            ],
        ),
        migrations.AddConstraint(
            model_name='namespace',
            constraint=models.CheckConstraint(check=models.Q(name__regex='^[-0-9a-z.]+$'), name='namespace_name_must_contain_only_letters_numbers_or_dots'),
        ),
        migrations.AddConstraint(
            model_name='zone',
            constraint=models.CheckConstraint(check=models.Q(name__regex='^[-0-9a-z.]+$'), name='zone_name_must_contain_only_letters_numbers_or_dots'),
        ),
        migrations.AlterUniqueTogether(
            name='zone',
            unique_together={('name', 'namespace')},
        ),
        migrations.AddConstraint(
            model_name='rr',
            constraint=models.CheckConstraint(check=models.Q(name__regex='^([-0-9a-zA-Z._*]+|@)$'), name='record_name_must_contain_only_letters_numbers_star_or_dots'),
        ),
        migrations.AlterUniqueTogether(
            name='permzone',
            unique_together={('zone', 'group', 'action')},
        ),
        migrations.AlterUniqueTogether(
            name='permrr',
            unique_together={('rr', 'group', 'action')},
        ),
        migrations.AlterUniqueTogether(
            name='permnamespace',
            unique_together={('namespace', 'group', 'action')},
        ),
    ]
